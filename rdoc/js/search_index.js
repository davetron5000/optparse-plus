var search_data = {"index":{"searchIndex":["basicobject","basicobject","optparseplus","baseintegrationtest","cli","clilogger","clilogging","cucumber","error","executionstrategy","base","jvm","mri","open_3","open_4","rbxopen_4","exitnow","failedcommanderror","integrationtestassertions","main","optionparserproxy","processstatus","sh","add_to_file()","arg()","arg()","assert_banner()","assert_file()","assert_oneline_summary()","assert_option()","banner=()","change_logger()","check_and_prepare_basedir!()","check_args!()","copy_file()","debug()","defaults_from_config_file()","defaults_from_env_var()","description()","description()","error()","error_formatter=()","error_level=()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exception_meaning_command_not_found()","exit_now!()","fatal()","gemspec()","go!()","help_now!()","included()","included()","included()","included()","info()","leak_exceptions()","level=()","logger()","logger=()","main()","method_missing()","new()","new()","new()","new()","new()","on()","on()","options()","opts()","post_setup()","render_license_partial()","run_app()","run_command()","run_command()","run_command()","run_command()","run_command()","set_execution_strategy()","set_sh_logger()","sh()","sh!()","subclass_must_implement!()","success?()","template_dir()","template_dirs_in()","use_log_level_option()","version()","version()","warn()","readme","ci","setup"],"longSearchIndex":["basicobject","object","optparseplus","optparseplus::baseintegrationtest","optparseplus::cli","optparseplus::clilogger","optparseplus::clilogging","optparseplus::cucumber","optparseplus::error","optparseplus::executionstrategy","optparseplus::executionstrategy::base","optparseplus::executionstrategy::jvm","optparseplus::executionstrategy::mri","optparseplus::executionstrategy::open_3","optparseplus::executionstrategy::open_4","optparseplus::executionstrategy::rbxopen_4","optparseplus::exitnow","optparseplus::failedcommanderror","optparseplus::integrationtestassertions","optparseplus::main","optparseplus::optionparserproxy","optparseplus::processstatus","optparseplus::sh","optparseplus::cli#add_to_file()","optparseplus::main#arg()","optparseplus::optionparserproxy#arg()","optparseplus::integrationtestassertions#assert_banner()","optparseplus::integrationtestassertions#assert_file()","optparseplus::integrationtestassertions#assert_oneline_summary()","optparseplus::integrationtestassertions#assert_option()","optparseplus::optionparserproxy#banner=()","optparseplus::clilogging#change_logger()","optparseplus::cli#check_and_prepare_basedir!()","optparseplus::optionparserproxy#check_args!()","optparseplus::cli#copy_file()","optparseplus::clilogging#debug()","optparseplus::main#defaults_from_config_file()","optparseplus::main#defaults_from_env_var()","optparseplus::main#description()","optparseplus::optionparserproxy#description()","optparseplus::clilogging#error()","optparseplus::clilogger#error_formatter=()","optparseplus::clilogger#error_level=()","optparseplus::executionstrategy::base#exception_meaning_command_not_found()","optparseplus::executionstrategy::jvm#exception_meaning_command_not_found()","optparseplus::executionstrategy::mri#exception_meaning_command_not_found()","optparseplus::executionstrategy::rbxopen_4#exception_meaning_command_not_found()","optparseplus::exitnow#exit_now!()","optparseplus::clilogging#fatal()","optparseplus::cli#gemspec()","optparseplus::main#go!()","optparseplus::exitnow#help_now!()","optparseplus::clilogging::included()","optparseplus::exitnow::included()","optparseplus::main::included()","optparseplus::sh::included()","optparseplus::clilogging#info()","optparseplus::main#leak_exceptions()","optparseplus::clilogger#level=()","optparseplus::clilogging#logger()","optparseplus::clilogging#logger=()","optparseplus::main#main()","optparseplus::optionparserproxy#method_missing()","optparseplus::clilogger::new()","optparseplus::error::new()","optparseplus::failedcommanderror::new()","optparseplus::optionparserproxy::new()","optparseplus::processstatus::new()","optparseplus::main#on()","optparseplus::optionparserproxy#on()","optparseplus::main#options()","optparseplus::main#opts()","optparseplus::optionparserproxy#post_setup()","optparseplus::cli#render_license_partial()","optparseplus::baseintegrationtest#run_app()","optparseplus::executionstrategy::base#run_command()","optparseplus::executionstrategy::jvm#run_command()","optparseplus::executionstrategy::mri#run_command()","optparseplus::executionstrategy::open_3#run_command()","optparseplus::executionstrategy::open_4#run_command()","optparseplus::sh#set_execution_strategy()","optparseplus::sh#set_sh_logger()","optparseplus::sh#sh()","optparseplus::sh#sh!()","optparseplus::executionstrategy::base#subclass_must_implement!()","optparseplus::processstatus#success?()","optparseplus::cli#template_dir()","optparseplus::cli#template_dirs_in()","optparseplus::clilogging#use_log_level_option()","optparseplus::main#version()","optparseplus::optionparserproxy#version()","optparseplus::clilogging#warn()","","",""],"info":[["BasicObject","","classes/BasicObject.html","",""],["Object","","classes/Object.html","",""],["OptparsePlus","","classes/OptparsePlus.html","",""],["OptparsePlus::BaseIntegrationTest","","classes/OptparsePlus/BaseIntegrationTest.html","",""],["OptparsePlus::CLI","","classes/OptparsePlus/CLI.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>Stuff to implement optparse_plus&#39;s CLI app.  These stuff …\n"],["OptparsePlus::CLILogger","","classes/OptparsePlus/CLILogger.html","","<p>A Logger instance that gives better control of messaging the user and logging app activity.  At it&#39;s …\n"],["OptparsePlus::CLILogging","","classes/OptparsePlus/CLILogging.html","","<p>Provides easier access to a shared OptparsePlus::CLILogger instance.\n<p>Include this module into your class, …\n"],["OptparsePlus::Cucumber","","classes/OptparsePlus/Cucumber.html","","<p>*<strong>NOTE!</strong>* Cucumber is not recommened or supported by optparse_plus, as Aruba has diverged too much. This …\n"],["OptparsePlus::Error","","classes/OptparsePlus/Error.html","","<p>Standard exception you can throw to exit with a given  status code. Generally, you should prefer OptparsePlus::Main#exit_now! …\n"],["OptparsePlus::ExecutionStrategy","","classes/OptparsePlus/ExecutionStrategy.html","",""],["OptparsePlus::ExecutionStrategy::Base","","classes/OptparsePlus/ExecutionStrategy/Base.html","","<p>Base for any ExecutionStrategy implementation.  Currently, this is nothing more than an interface specification. …\n"],["OptparsePlus::ExecutionStrategy::JVM","","classes/OptparsePlus/ExecutionStrategy/JVM.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>OptparsePlus::ExecutionStrategy for the JVM that uses JVM classes …\n"],["OptparsePlus::ExecutionStrategy::MRI","","classes/OptparsePlus/ExecutionStrategy/MRI.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>Base strategy for MRI rubies.\n"],["OptparsePlus::ExecutionStrategy::Open_3","","classes/OptparsePlus/ExecutionStrategy/Open_3.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>Implementation for modern Rubies that uses the built-in Open3 …\n"],["OptparsePlus::ExecutionStrategy::Open_4","","classes/OptparsePlus/ExecutionStrategy/Open_4.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>ExecutionStrategy for non-modern Rubies that must rely on Open4 …\n"],["OptparsePlus::ExecutionStrategy::RBXOpen_4","","classes/OptparsePlus/ExecutionStrategy/RBXOpen_4.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>For RBX; it throws a different exception when a command isn&#39;t …\n"],["OptparsePlus::ExitNow","","classes/OptparsePlus/ExitNow.html","","<p>Provides #exit_now! and #help_now!.  You might mix this into your business logic classes if they will …\n"],["OptparsePlus::FailedCommandError","","classes/OptparsePlus/FailedCommandError.html","","<p>Thrown by certain methods when an externally-called command exits nonzero\n"],["OptparsePlus::IntegrationTestAssertions","","classes/OptparsePlus/IntegrationTestAssertions.html","",""],["OptparsePlus::Main","","classes/OptparsePlus/Main.html","","<p>Include this module to gain access to the “canonical command-line app structure” DSL.  This …\n"],["OptparsePlus::OptionParserProxy","","classes/OptparsePlus/OptionParserProxy.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>A proxy to OptionParser that intercepts #on so that we can allow …\n"],["OptparsePlus::ProcessStatus","","classes/OptparsePlus/ProcessStatus.html","","<p><strong>OptparsePlus Internal - treat as private</strong>\n<p>A wrapper/enhancement of Process::Status that handles coersion …\n"],["OptparsePlus::SH","","classes/OptparsePlus/SH.html","","<p>Module with various helper methods for executing external commands. In most cases, you can use #sh to …\n"],["add_to_file","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-add_to_file","(file,lines,options = {})","<p>Add content to a file\n<p><code>file</code> &mdash; path to the file\n<p><code>lines</code> &mdash; Array of String representing the lines to add\n"],["arg","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-arg","(arg_name,*options)","<p>Sets the name of an arguments your app accepts.  Note that no sanity checking is done on the configuration …\n"],["arg","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-arg","(arg_name,*options)","<p>Sets the banner to include these arg names\n"],["assert_banner","OptparsePlus::IntegrationTestAssertions","classes/OptparsePlus/IntegrationTestAssertions.html#method-i-assert_banner","(stdout, bin_name, takes_options: , takes_arguments: {})","<p>Assert that the stdout contains an appropriate banner for your app\n<p>stdout &mdash; The standard out, presumably …\n"],["assert_file","OptparsePlus::IntegrationTestAssertions","classes/OptparsePlus/IntegrationTestAssertions.html#method-i-assert_file","(filename, contains:)","<p>Assert that a file&#39;s contents contains one or more regexps\n<p>filename &mdash; The file whose contents to check …\n"],["assert_oneline_summary","OptparsePlus::IntegrationTestAssertions","classes/OptparsePlus/IntegrationTestAssertions.html#method-i-assert_oneline_summary","(stdout)","<p>Assert that your app has a one-line summary\n<p>stdout &mdash; The standard out, presumably of running `«your-app» …\n\n"],["assert_option","OptparsePlus::IntegrationTestAssertions","classes/OptparsePlus/IntegrationTestAssertions.html#method-i-assert_option","(stdout, *options)","<p>Assert that your app takes the given option(s)\n<p>stdout &mdash; The standard out, presumably of running `«your-app» …\n"],["banner=","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-banner-3D","(new_banner)","<p>Proxies to underlying OptionParser\n"],["change_logger","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-change_logger","(new_logger)","<p>Change the global logger that includers will use.  Useful if you don&#39;t want the default configured …\n"],["check_and_prepare_basedir!","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-check_and_prepare_basedir-21","(basedir,force)","<p>Checks that the basedir can be used, either by not existing, or by existing and force is true. In that …\n"],["check_args!","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-check_args-21","()",""],["copy_file","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-copy_file","(relative_path,options = {})","<p>Copies a file, running it through ERB\n<p><code>relative_path</code> &mdash; path to the file, relative to the project root, minus …\n"],["debug","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-debug","(progname = nil, &block)","<p>pass-through to <code>logger.debug(progname,&amp;block)</code>\n"],["defaults_from_config_file","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-defaults_from_config_file","(filename,options={})","<p>Set the path to the file where defaults can be configured.\n<p>The format of this file can be either a simple …\n"],["defaults_from_env_var","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-defaults_from_env_var","(env_var)","<p>Set the name of the environment variable where users can place default options for your app.  Omit this …\n"],["description","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-description","(desc)","<p>Set the description of your app for inclusion in the help output.\n<p><code>desc</code> &mdash; a short, one-line description of …\n\n"],["description","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-description","(desc)",""],["error","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-error","(progname = nil, &block)","<p>pass-through to <code>logger.error(progname,&amp;block)</code>\n"],["error_formatter=","OptparsePlus::CLILogger","classes/OptparsePlus/CLILogger.html#method-i-error_formatter-3D","(formatter)","<p>Overrides the formatter for the error logger.  A future call to #formatter= will affect both, so the …\n"],["error_level=","OptparsePlus::CLILogger","classes/OptparsePlus/CLILogger.html#method-i-error_level-3D","(level)","<p>Set the threshold for what messages go to the error device.  Note that calling #level= will <strong>not</strong> affect …\n"],["exception_meaning_command_not_found","OptparsePlus::ExecutionStrategy::Base","classes/OptparsePlus/ExecutionStrategy/Base.html#method-i-exception_meaning_command_not_found","()","<p>Returns the class that, if caught by calling #run_command, represents the underlying command not existing. …\n"],["exception_meaning_command_not_found","OptparsePlus::ExecutionStrategy::JVM","classes/OptparsePlus/ExecutionStrategy/JVM.html#method-i-exception_meaning_command_not_found","()",""],["exception_meaning_command_not_found","OptparsePlus::ExecutionStrategy::MRI","classes/OptparsePlus/ExecutionStrategy/MRI.html#method-i-exception_meaning_command_not_found","()",""],["exception_meaning_command_not_found","OptparsePlus::ExecutionStrategy::RBXOpen_4","classes/OptparsePlus/ExecutionStrategy/RBXOpen_4.html#method-i-exception_meaning_command_not_found","()",""],["exit_now!","OptparsePlus::ExitNow","classes/OptparsePlus/ExitNow.html#method-i-exit_now-21","(exit_code,message=nil)","<p>Call this to exit the program immediately with the given error code and message.\n<p><code>exit_code</code> &mdash; exit status …\n"],["fatal","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-fatal","(progname = nil, &block)","<p>pass-through to <code>logger.fatal(progname,&amp;block)</code>\n"],["gemspec","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-gemspec","()",""],["go!","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-go-21","()","<p>Start your command-line app, exiting appropriately when complete.\n<p>This <strong>will</strong> exit your program when it …\n"],["help_now!","OptparsePlus::ExitNow","classes/OptparsePlus/ExitNow.html#method-i-help_now-21","(message)","<p>Exit the program as if the user made an error invoking your app, providing them the message as well as …\n"],["included","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-c-included","(k)",""],["included","OptparsePlus::ExitNow","classes/OptparsePlus/ExitNow.html#method-c-included","(k)",""],["included","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-c-included","(k)",""],["included","OptparsePlus::SH","classes/OptparsePlus/SH.html#method-c-included","(k)",""],["info","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-info","(progname = nil, &block)","<p>pass-through to <code>logger.info(progname,&amp;block)</code>\n"],["leak_exceptions","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-leak_exceptions","(leak)","<p>Configure the auto-handling of StandardError exceptions caught from calling go!.\n<p>leak &mdash; if true, go! will …\n\n"],["level=","OptparsePlus::CLILogger","classes/OptparsePlus/CLILogger.html#method-i-level-3D","(level)",""],["logger","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-logger","()","<p>Access the shared logger.  All classes that include this module will get the same logger via this method. …\n"],["logger=","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-logger-3D","(new_logger)",""],["main","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-main","(&block)","<p>Declare the main method for your app. This allows you to specify the general logic of your app at the …\n"],["method_missing","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-method_missing","(sym,*args,&block)","<p>Defers all calls save #on to the underlying OptionParser instance\n"],["new","OptparsePlus::CLILogger","classes/OptparsePlus/CLILogger.html#method-c-new","(log_device=$stdout,error_device=$stderr)","<p>A logger that logs error-type messages to a second device; useful for ensuring that error messages go …\n"],["new","OptparsePlus::Error","classes/OptparsePlus/Error.html#method-c-new","(exit_code,message=nil)","<p>Create an Error with the given status code and message\n"],["new","OptparsePlus::FailedCommandError","classes/OptparsePlus/FailedCommandError.html#method-c-new","(exit_code,command,custom_error_message = nil)","<p>exit_code &mdash; exit code of the command that caused this\n<p>command &mdash; the entire command-line that caused this\n<p>custom_error_message … &mdash; "],["new","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-c-new","(option_parser,options)","<p>Create the proxy\n<p><code>option_parser</code> &mdash; An OptionParser instance\n<p><code>options</code> &mdash; a hash that will store the options set …\n"],["new","OptparsePlus::ProcessStatus","classes/OptparsePlus/ProcessStatus.html#method-c-new","(status,expected)","<p>Create the ProcessStatus with the given status.\n<p>status &mdash; if this responds to #exitstatus, that method is …\n"],["on","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-on","(*args,&block)","<p>Calls the <code>on</code> method of #opts with the given arguments (see RDoc for #opts for the additional help provided). …\n"],["on","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-on","(*args,&block)","<p>If invoked as with OptionParser, behaves the exact same way. If invoked without a block, however, the …\n"],["options","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-options","()","<p>Returns a Hash that you can use to store or retrieve options parsed from the command line.  When you …\n"],["opts","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-opts","()","<p>Returns an OptionParser that you can use to declare your command-line interface.  Generally, you won&#39;t …\n"],["post_setup","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-post_setup","()","<p>We need some documentation to appear at the end, after all OptionParser setup has occured, but before …\n"],["render_license_partial","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-render_license_partial","(partial)",""],["run_app","OptparsePlus::BaseIntegrationTest","classes/OptparsePlus/BaseIntegrationTest.html#method-i-run_app","(app_name, args, allow_failure: false)","<p>Run your app, capturing stdout, stderr, and process status.\n<p>app_name &mdash; Your bin name, without `bin/`\n<p>args … &mdash; "],["run_command","OptparsePlus::ExecutionStrategy::Base","classes/OptparsePlus/ExecutionStrategy/Base.html#method-i-run_command","(command)","<p>Executes the command and returns the results back.  This should do no logging or other logic other than …\n"],["run_command","OptparsePlus::ExecutionStrategy::JVM","classes/OptparsePlus/ExecutionStrategy/JVM.html#method-i-run_command","(command)",""],["run_command","OptparsePlus::ExecutionStrategy::MRI","classes/OptparsePlus/ExecutionStrategy/MRI.html#method-i-run_command","(command)",""],["run_command","OptparsePlus::ExecutionStrategy::Open_3","classes/OptparsePlus/ExecutionStrategy/Open_3.html#method-i-run_command","(command)",""],["run_command","OptparsePlus::ExecutionStrategy::Open_4","classes/OptparsePlus/ExecutionStrategy/Open_4.html#method-i-run_command","(command)",""],["set_execution_strategy","OptparsePlus::SH","classes/OptparsePlus/SH.html#method-i-set_execution_strategy","(strategy)","<p>Set the strategy to use for executing commands.  In general, you don&#39;t need to set this since this …\n"],["set_sh_logger","OptparsePlus::SH","classes/OptparsePlus/SH.html#method-i-set_sh_logger","(logger)","<p>Override the default logger (which is the one provided by CLILogging). You would do this if you want …\n"],["sh","OptparsePlus::SH","classes/OptparsePlus/SH.html#method-i-sh","(command,options={},&block)","<p>Run a shell command, capturing and logging its output. If the command completed successfully, it&#39;s …\n"],["sh!","OptparsePlus::SH","classes/OptparsePlus/SH.html#method-i-sh-21","(command,options={},&block)","<p>Run a command, throwing an exception if the command exited nonzero. Otherwise, behaves exactly like  …\n"],["subclass_must_implement!","OptparsePlus::ExecutionStrategy::Base","classes/OptparsePlus/ExecutionStrategy/Base.html#method-i-subclass_must_implement-21","()",""],["success?","OptparsePlus::ProcessStatus","classes/OptparsePlus/ProcessStatus.html#method-i-success-3F","()","<p>True if the exit status was a successul (i.e. expected) one.\n"],["template_dir","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-template_dir","(from)","<p>Get the location of the templates for profile “from”\n"],["template_dirs_in","OptparsePlus::CLI","classes/OptparsePlus/CLI.html#method-i-template_dirs_in","(profile)",""],["use_log_level_option","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-use_log_level_option","(args = {})","<p>Call this <strong>if</strong> you&#39;ve included OptparsePlus::Main to set up a <code>--log-level</code> option for your app that …\n"],["version","OptparsePlus::Main","classes/OptparsePlus/Main.html#method-i-version","(version,version_options={})","<p>Set the version of your app so it appears in the banner.  This also adds –version as an option to your …\n"],["version","OptparsePlus::OptionParserProxy","classes/OptparsePlus/OptionParserProxy.html#method-i-version","(version)","<p>Sets the version for the banner\n"],["warn","OptparsePlus::CLILogging","classes/OptparsePlus/CLILogging.html#method-i-warn","(progname = nil, &block)","<p>pass-through to <code>logger.warn(progname,&amp;block)</code>\n"],["README","","files/README_rdoc.html","","<p>optparse-plus - Wrapper around OptionParse to Make CLIs a bit Easier\n<p>Author &mdash; Dave Copeland (davetron5000 …\n"],["ci","","files/bin/ci.html","","<p>#!/bin/bash\n<p>set -e echo “[bin/ci] Running unit tests” bundle exec rake test\n<p>echo “[bin/ci] …\n"],["setup","","files/bin/setup.html","","<p>#!/bin/bash\n<p>set -e\n<p>bundle check || bundle install\n"]]}}